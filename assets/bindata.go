// Code generated by go-bindata.
// sources:
// data/default_catalog.json
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDefault_catalogJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x4d\x8f\xa3\x30\x0c\xbd\xf3\x2b\x2c\x0e\x7b\x6a\x96\x16\x76\xda\xd9\x9e\x77\x7f\xc1\x1c\xf6\xb0\xea\xc1\x24\xa6\x8d\x1a\x08\x8a\x9d\x4a\x68\xd4\xff\x3e\x0a\xd3\x0f\x40\xbd\x20\xe2\x3c\xdb\x2f\xef\xbd\xcf\x0c\x20\x67\x0a\x17\xab\x89\xf3\x3d\xfc\xcf\x00\x00\x3e\xc7\x2f\x40\x6e\x4d\xbe\x87\xfc\xad\x5e\xa3\x29\x1b\x52\xcd\x4e\xaf\xd5\x66\x43\x5b\xf5\x4e\xbb\xad\xda\x35\xba\xaa\x08\x49\x6b\xf3\x2b\x5f\xdd\x7b\x3a\x6c\x29\x75\x91\x68\xf3\xac\x1a\x62\x1d\x6c\x2f\xd6\x77\xe9\xf2\xaf\x68\x03\xc8\x80\x70\x5b\xfe\x44\xd6\xb6\x33\x58\xbb\x34\x43\x42\xa4\x47\xbd\x25\x41\x83\x82\xf9\xfe\xc1\x2f\xcd\xb5\xdc\x3b\x1c\xee\x4b\xa7\xc7\xd5\x13\xe5\x7c\x77\x5c\x30\xf8\x63\x59\x82\xad\xa3\x90\x81\x40\xce\xa6\x95\x70\xa6\x41\x5d\xd0\x45\x02\x16\x1f\x08\x1a\x1f\x40\x4e\x04\xad\x67\x01\x1d\xac\x58\x8d\x0e\x12\x0b\xf0\x0d\x20\x98\xc9\x10\x1e\x58\xa8\x9d\x6e\xed\x83\xbf\x58\x43\x61\xc1\xf1\x43\x30\x9c\xe1\x07\xfc\xc3\xa1\x9b\xb1\xe4\xd8\xf7\x3e\x48\x0c\x2e\xc1\x4e\x22\x3d\xef\x8b\xe2\x68\xe5\x14\xeb\x9f\xda\xb7\x85\x76\x3e\x9a\xc6\xc7\xce\x84\x41\x69\xdf\xb6\xb1\xb3\x32\x14\x49\x69\xa5\x1b\x75\x93\x52\xd5\xc1\x9f\x29\x14\x96\x39\x12\xe7\xb7\xf9\xd7\x87\x90\xbd\xc3\xee\xe9\xf5\xd4\xef\x99\xe7\xba\xc1\xb7\x75\x39\xf1\xbc\x36\xeb\xad\xa2\xaa\xac\x36\xd5\x3b\x36\xbf\x77\xf5\x84\xfb\xc4\x77\x3e\x61\x20\x33\xbf\x5b\x68\xff\x31\x42\x80\x9d\xd5\x94\x84\x4c\x0f\x00\xed\x22\x0b\x85\x79\xe3\x4b\xd3\xbf\x63\x12\x9d\x23\x19\xdf\x31\x46\x0d\x2e\x65\x7e\x58\xcd\x31\x4b\xe1\xbf\x99\x4d\x30\xd7\x6c\xf9\x77\x98\xc9\x14\x7b\x83\x42\xaf\xd2\x28\x78\x9c\x6b\x38\xcf\xfb\xed\x5c\x4e\x0b\x67\x1a\xc6\x6c\xdd\x09\x1c\xb2\xfb\xe2\x43\x76\xcd\xbe\x02\x00\x00\xff\xff\xc5\x52\xf4\xc8\x8a\x03\x00\x00")

func dataDefault_catalogJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDefault_catalogJson,
		"data/default_catalog.json",
	)
}

func dataDefault_catalogJson() (*asset, error) {
	bytes, err := dataDefault_catalogJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/default_catalog.json", size: 906, mode: os.FileMode(420), modTime: time.Unix(1487633754, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/default_catalog.json": dataDefault_catalogJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"default_catalog.json": &bintree{dataDefault_catalogJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

